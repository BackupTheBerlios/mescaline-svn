mescaline v0.5

magnus kulke 2008, magnus.kulke at radicalapproach.de

about:

Mescaline is a php web application and framework which makes data stored in databases available to users. The interfaces for viewing and editing the data are created without requiring any coding or configfile editing using a wizard.

license:

GPL v3, see COPYING

requirements:

- It should work on pretty much every os, tested and developed on linux.
- PHP5, not sure about oop support in php4.
- MySQL, i guess most versions work.
- A webserver (Apache).
- In case you want to use the wizard, the webservers needs the right to write files.

installation:

1) move the whole "mescaline" folder into the root of your webserver hierarchy.
2) if you want to use the wizard for creating forms, you should assign the ownership of the "mescaline/context" directory to the web-server user.
3) protect the "mescaline/includes" and "mescaline/context" folders from direct access by users, otherwise they will be able to read the login information to the mysql server in plaintext. included in the distribution are .htaccess files which deny direct access from the webbrowser.
4) you may also deny access to the "mescaline/wizard" folder by default, and allow it, while using the wizard.

usage:

0) terms with an attached * are explained in 3) glossary.

1) creating and accessing contexts.

mescaline build its tables and forms with the information stored in context files. the context files can be created using the wizard or manually in a script. The contexts are ussually stored in the subdir "./context". If the directory is not writable the wizard for creating will be disabled. you can name a certain context *file* "./context", then mescaline will appear in single-table mode, using the context file.    

1.1) using the wizard.

the wizard is started by calling <host>/mescaline/wizard/index.php. 

- enter the information needed to access the database*.
- if the database* could be accessed you select the table you want to create forms for.
- the idfield* is usually the first field in a table of the type integer.
- when you select the fields, it is important to include all fields which are marked as required *if* you want the users to be able to create new entries* in the form.
- after selecting the fields you can choose to assign (and remove) references* to fields.  
- to add references* you have to choose table & idfield* again for the referenced table.
- the reference* display field*, is the column* you want to be displayed in the table and edit forms dropdown menus.
- The autogenerated SQL query for references* will fetch all *entries of the referenced table and display them in the edit forms dropdown menu. To further narrow this selection, you can customize the SQL query.
- When finished, the new context is available in "mescaline/context/<context name>.context".

1.2) manual creation.

the manual creation requires you to write a php script on your own, which builds the context. you have to use classes in the include path.

  ini_set('include_path', '<install path>/mescaline/includes/');
  require_once('table.inc');	
  require_once('idfield.inc');
  require_once('boolfield.inc');
  require_once('listfield.inc');
  require_once('reference.inc');
  require_once('database.inc');
  require_once('context.inc');

1.2.1) create a table object.

the table names have to be actual names in the database*.

  $table = new Table(<table name>);

1.2.2) create database object.

  $database = new Database(<database name>, <hostname>, <user>, <password>);

1.2.3) build the field array.

the names of the fields* have to be the correct column* names of the tables.

  $fields = array();

1.2.3.1) add the idfield* first.

  $fields[] = new IDField(<idfield name>);

1.2.3.2) add default fields (if there are any).

  $fields[] = new Field(<field name>);

or for optional fields

  $fields[] = new Field(<field name>, true); 

1.2.3.3) add bool fields (if there are any).

  $fields[] = new BoolField(<field name>);

or for optional fields

  $fields[] = new BoolField(<field name>, true); 

1.2.3.4) add list fields (references*, if there are any).

1.2.3.4.1) create reference table.

  $referencetable = new Table(<table name>);

1.2.3.4.2) set id field from the referenced table.

  $referenceidfield = new IDField(<referenced idfield name>);

1.2.3.4.3) set the field to be displayed in table and edit form from the referenced table.

  $referencedisplayfield = new Field(<referenced field name>);

1.2.3.4.4) create reference object.

  $reference = new Reference($referencetable, $referenceidfield, $referencedisplayfield);

1.2.3.4.5) create listfield and its query.

  $listfield = new ListField(<field name>, $reference);
  
or for an optional field

  $listfield = new ListField(<field name>, $reference, true);

for the reference* field you can either use a generated query

  $listfield->query = $listfield->buildQuery($database);

or use your own

  $listfield->query = "<custom query>";

add the listfield to the fields array.

  $fields[] = $listfield;

1.2.4) assign the fields to the table.

  $table->fields = $fields;

1.2.5) create context object and serialize it to the disk.

  $context = new Context(<context name>, $table, $database);
  $s = serialize($context);
  $fp = fopen($context->name . ".context", "w");
  fputs($fp, $s);
  fclose($fp);

1.2.6) move the context file.

there should be a context file now, which can used after it has been moved into "mescaline/context".

2) calling the forms

the forms are started by calling <host>/mescaline/index.php?context=<context name>

3) glossary

- column/field: kind of used as synonyms here. however the correct meaning for column would likely be the structural entity in a table layout, while a field would be a single element of a column within a row*.
- database: currently this is refering to MySQL exclusively.
- entry/row: an entry means a table row here.
- idfield: a special column in a table which identifies a row. no value in this column should exist twice. usually the idfield is of type integer and increments itsself automatically.
- reference: you can reference the content of other tables in a table. the referencing table has a column, which contains the idfields* of the referenced entries in the other table. the referenced entry is displayed in the table view and in the edit forms there appears a dropdown menu, which contains only the values stored in the referenced table.

4) creating new field types.

the following steps describe how to enhance mescaline by added custom fields. refer to ListField, BoolField & StringField implementations for examples.

4.1) create the model class.

create a class <custom name>Field with the filename "includes/<custom name>field.inc" derived from class Field. 

4.2) autodetection.

if you want the class to be autodetected in the wizard you have to put a handler for it in the class Database. Add "require_once("<custom name>field.inc");" to the top of "includes/database.inc". Add a handler to the Database::columns method.

4.3) create the view class.

create a class Web<custom name>Field with the filename "includes/web<custom name>field.inc" derived from class WebField. 

4.4) handle it in the web context.

put "require_once("web<custom name>field.inc");" to the top of "include/webcontext.inc". Add a line in the WebContext::createWebFields() method for your custom Field Class. 

5) advanced context customizing

5.1) general

you can edit a context in php if you deserialize the context, change some attributes, which are not supported in the wizard yet and write it back to disk. 

	$FILENAME = "my.context"
	$s = implode("", @file($FILENAME));
	$context = unserialize($s);

	[... manipulate context ...]

	$s = serialize($context);
	$fp = fopen($FILENAME, "w");
	fputs($fp, $s);
	fclose($fp);

5.2) add a where clause

where clauses to the context tables can be added by using a context's table "whereclause" member. complex AND/OR combinations are done with "WhereCombination" objects, 
which are created with two subelements, which can be either a "WhereClause" holding a string, or another "WhereCombination". Both elements are combined by either "AND" or "OR" strings.

	$machinestest = new WhereClause("`machines`.`Test` = '1'");
	$machinesdev = new WhereClause("`machines`.`Development` = '1'");
	$context->table->whereclause = new WhereCombination($machinestest, "OR", $machinesdev);

5.3) defining right for the table.

by default the user can create new entries (the wizard might turn this off, if not all necessary fields are in the context), edit entries or delete them. a context's "allow_new", "allow_edit", "allow_delete" members can be customized.

	$context->allow_delete = false;

